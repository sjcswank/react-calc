{"version":3,"sources":["components/Button.js","components/Input.js","components/Clear.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","className","concat","val","children","isNaN","onClick","handleClick","Input","input","Clear","App","state","value","_this","setState","handleEquals","evalText","replace","math","handleClear","components_Input","this","components_Button","components_Clear","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAoBeA,SAZA,SAAAC,GAEd,OACCC,EAAAC,EAAAC,cAAA,OACAC,UAAS,UAAAC,QATSC,EAScN,EAAMO,SAR/BC,MAAMF,IAAgB,MAARA,GAAuB,MAARA,EAQqB,WAAP,OAClDG,QAAS,kBAAMT,EAAMU,YAAYV,EAAMO,YAErCP,EAAMO,UAZS,IAACD,ICSLK,EATD,SAAAX,GAEb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbJ,EAAMY,QCOKC,EAXD,SAAAb,GAEb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfK,QAAS,kBAAMT,EAAMU,gBADrB,mBCCmBI,6MACnBC,MAAQ,CACNC,MAAO,MAGTN,YAAc,SAACJ,GACbW,EAAKC,SAAS,CACZF,MAAOC,EAAKF,MAAMC,MAAQV,OAI9Ba,aAAe,WACb,IAAMC,EAAWH,EAAKF,MAAMC,MAAMK,QAAQ,IAAK,KAC/CJ,EAAKC,SAAS,CACZF,MAAOM,OAAUF,QAIrBG,YAAc,WACZN,EAAKC,SAAS,CACZF,MAAO,8EAKT,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqB,EAAD,CAAOZ,MAAOa,KAAKV,MAAMC,SAE3Bf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKf,aAA1B,KACAT,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKf,aAA1B,KACAT,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKf,aAA1B,KACAT,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKf,aAA1B,MAEFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKf,aAA1B,KACAT,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKf,aAA1B,KACAT,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKf,aAA1B,KACAT,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKf,aAA1B,MAEFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKf,aAA1B,KACAT,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKf,aAA1B,KACAT,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKf,aAA1B,KACAT,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKf,aAA1B,MAEFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKf,aAA1B,KACAT,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKf,aAA1B,KACAT,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKN,cAA1B,KACAlB,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,YAAae,KAAKf,aAA1B,MAEFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwB,EAAD,CAAOjB,YAAae,KAAKF,wBAxDJK,aCKbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3d77ad71.chunk.js","sourcesContent":["import React from 'react';\r\nimport './../App.css';\r\n\r\nconst isOperator = (val) => {\r\n\treturn !isNaN(val) || val === \".\" || val === \"=\";\r\n}\r\n\r\n\r\nconst Button = props => {\r\n\r\n\treturn(\r\n\t\t<div \r\n\t\tclassName={`button ${isOperator(props.children) ? null : \"operator\"}`}\r\n\t\tonClick={() => props.handleClick(props.children)}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport './../App.css';\r\n\r\nconst Input = props => {\r\n\r\n\treturn(\r\n\t\t<div className=\"full-width input\">\r\n\t\t\t{props.input}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Input; ","import React from 'react';\r\nimport './../App.css';\r\n\r\nconst Clear = props => {\r\n\r\n\treturn(\r\n\t\t<div className=\"clear full-width\"\r\n\t\tonClick={() => props.handleClick()}\r\n\t\t>\r\n\t\t\tClear\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Clear; ","import React, {Component} from 'react';\nimport './App.css';\nimport Button from './components/Button';\nimport Input from './components/Input';\nimport Clear from './components/Clear';\nimport * as math from 'mathjs'\n\nexport default class App extends Component {\n  state = {\n    value: \"\"\n  }\n\n  handleClick = (val) => {\n    this.setState({ \n      value: this.state.value + val\n    })\n  }\n\n  handleEquals = () => {\n    const evalText = this.state.value.replace('x', '*');\n    this.setState({\n      value: math.eval(evalText)\n    });\n  }\n\n  handleClear = () => {\n    this.setState({\n      value: \"\"\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"calc-wrapper\">\n          <div className=\"row\">\n            <Input input={this.state.value} />\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.handleClick}>7</Button>\n            <Button handleClick={this.handleClick}>8</Button>\n            <Button handleClick={this.handleClick}>9</Button>\n            <Button handleClick={this.handleClick}>/</Button>\n            </div>\n          <div className=\"row\">\n            <Button handleClick={this.handleClick}>4</Button>\n            <Button handleClick={this.handleClick}>5</Button>\n            <Button handleClick={this.handleClick}>6</Button>\n            <Button handleClick={this.handleClick}>x</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.handleClick}>1</Button>\n            <Button handleClick={this.handleClick}>2</Button>\n            <Button handleClick={this.handleClick}>3</Button>\n            <Button handleClick={this.handleClick}>-</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.handleClick}>.</Button>\n            <Button handleClick={this.handleClick}>0</Button>\n            <Button handleClick={this.handleEquals}>=</Button>\n            <Button handleClick={this.handleClick}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Clear handleClick={this.handleClear} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}